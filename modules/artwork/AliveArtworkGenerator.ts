import { Artwork } from "@/types";
import { OpenAIService } from "../ai/OpenAIService";
import MarketDataFetcher from "../crypto/MarketDataFetcher";
import CryptoNewsFetcher from "../news/CryptoNewsFetcher";
import { darkHumorPrompt, darkHumorSystemPrompt } from "../prompts/twitterImageDarkHumorPrompt";
import { twitterImageSystemPrompt, twitterImagePrompt } from "../prompts/twitterImagePrompt";
import TwitterApiClient from "../twitter/TwitterApiClient";
import { ArtworkDatastore } from "./ArtworkDatastore";
import { ArtworkGenerator } from "./ArtworkGenerator";
import { ArtworkPromptCurator } from "./ArtworkPromptCurator";
import { sanitizeXmlValue } from "../utils/xml";

export class AliveArtworkGenerator {
    private datastore: ArtworkDatastore;
    private aiService: OpenAIService;
    private curator: ArtworkPromptCurator;
    private gen: ArtworkGenerator;
    private twitter: TwitterApiClient;

    constructor() {
        this.datastore = new ArtworkDatastore();
        this.aiService = new OpenAIService();

        this.curator = new ArtworkPromptCurator();
        this.gen = new ArtworkGenerator();

        this.twitter = new TwitterApiClient();
    }

    async generateArtwork() {
        // retrieve recent artworks generated by the system
        const recentArtworks = await this.datastore.getAliveArtworks();
        const recentPrompts = recentArtworks.map((artwork) => artwork.description);

        // generate image prompt
        const imagePrompt = await this.aiService.generateResponse(
            twitterImageSystemPrompt(),
            twitterImagePrompt(recentPrompts)
        );

        // curate prompt
        const artworkPrompt = await this.curator.createPrompt(imagePrompt.response, "AlIve");

        // save artwork
        const { artwork, image } = await this.gen.generateAndStore(artworkPrompt);
        // convert to buffer
        const buffer = Buffer.from(image, "base64");

        // post to twitter
        const tweet = await this.twitter.postTweetWithImage(artworkPrompt.title, buffer);
        return tweet;
    }

    async generateDarkArtwork() {
        // retrieve recent artworks generated by the system
        const recentArtworks = await this.datastore.getAliveArtworks();
        const recentPrompts = recentArtworks.map((artwork) => artwork.description);

        // gather data
        const marketDataFetcher = MarketDataFetcher.getInstance();
        const newsFetcher = new CryptoNewsFetcher();
        const majorCoins = await marketDataFetcher.getMajorCoins();
        const trendingCoins = await marketDataFetcher.getTrendingCoins();
        const news = await newsFetcher.getNewsForPrompt();

        // generate image prompt
        const prompt = darkHumorPrompt({ majorCoins, trendingCoins, news }, recentPrompts);
        const response = await this.aiService.generateResponse(darkHumorSystemPrompt(), prompt);
        console.log(prompt);

        const imagePrompt = response.response;
        const cleanXml = imagePrompt.replace(/>\s+</g, "><");
        console.log(cleanXml);

        const title = sanitizeXmlValue(cleanXml.match(/<title>([\s\S]*?)<\/title>/)?.[1] || "");
        const image_prompt = sanitizeXmlValue(
            cleanXml.match(/<image_prompt>([\s\S]*?)<\/image_prompt>/)?.[1] || ""
        );
        const tags = sanitizeXmlValue(cleanXml.match(/<tags>([\s\S]*?)<\/tags>/)?.[1] || "")
            .split(/[\s,]+/)
            .filter((tag) => tag.length > 0)
            .map((tag) => (tag.startsWith("#") ? tag : `#${tag}`));

        // validate required fields
        if (!title || !image_prompt) {
            throw new Error("Missing required fields in XML response");
        }

        // construct artwork prompt
        const artworkPrompt = {
            title,
            description: image_prompt,
            tags: tags || [],
            creator: "AlIve",
            marketMood: "Transition",
        } as Artwork;

        // save artwork
        const { artwork, image } = await this.gen.generateAndStore(artworkPrompt);
        // // convert to buffer
        const buffer = Buffer.from(image, "base64");

        // // post to twitter
        const tweet = await this.twitter.postTweetWithImage(artworkPrompt.title, buffer);
        return tweet;
    }
}
